{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4d1be255e3537bef99a7780b736ab74c207b97f56fa5939faa7ec23b738986f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2283728",
    "logsBloom": "0x
    "blockHash": "0x552a4fd38f10f1af010f3ae54a52de608dd6915c57044bcca6d9ad600dbbca98",
    "transactionHash": "0xf4d1be255e3537bef99a7780b736ab74c207b97f56fa5939faa7ec23b738986f",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2283728",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "d31e80b3f6eb56da023f47db279ce32e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dex/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/dex/UniswapV2ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\nimport './interfaces/IUniswapV2ERC20.sol';\\nimport './libraries/SafeMath.sol';\\n\\ncontract UniswapV2ERC20  {\\n    using SafeMath for uint;\\n\\n    string public   constant name = 'Uniswap V2';\\n    string public   constant symbol = 'UNI-V2';\\n    uint8 public   constant decimals = 18;\\n    uint  public   totalSupply;\\n    mapping(address => uint) public   balanceOf;\\n    mapping(address => mapping(address => uint)) public   allowance;\\n\\n    bytes32 public   DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public   constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public   nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor()  {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        // emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        // emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        // emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        // emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external   returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external   returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external   returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint128).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external   {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x040968f72c1edb2c86250cbcb27d89988672bde9412e51d12c2c3d2e72450929\",\"license\":\"UNLICENSED\"},\"contracts/dex/UniswapV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n// import './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\n// import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\n\\nimport './UniswapV2Pair.sol';\\n\\ncontract UniswapV2Factory {\\n    address public   feeTo;\\n    address public    feeToSetter;\\n\\n    mapping(address => mapping(address => address)) public   getPair;\\n    address[] public   allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter)  {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external   view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external   returns (address pair) {\\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external   {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external   {\\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x81af77ac65ad29004b5401bfebaba1a10a1bfbe4203aef4fc26d9a7374e52cdd\",\"license\":\"UNLICENSED\"},\"contracts/dex/UniswapV2Pair.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n// import './interfaces/IUniswapV2Pair.sol';\\nimport './interfaces/IUniswapV2Pair.sol';\\n\\nimport './UniswapV2ERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\n// import './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\n\\nimport './interfaces/IUniswapV2Callee.sol';\\n\\ncontract UniswapV2Pair is UniswapV2ERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public   constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public   factory;\\n    address public   token0;\\n    address public   token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public   price0CumulativeLast;\\n    uint public   price1CumulativeLast;\\n    uint public   kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public   view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor()  {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external   {\\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external   lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external   lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external   lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external   lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external   lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0x8c9edcbe115091bf7d76362ddb54e2385ef5d3535a8d18156d3b5d6426be7295\",\"license\":\"UNLICENSED\"},\"contracts/dex/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xabba659b40d8fd330bdfa5c311bb5a19e539f0e3045dc7f1ccf4210424a74763\",\"license\":\"UNLICENSED\"},\"contracts/dex/interfaces/IUniswapV2Callee.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xf0e1984417b7c01c14d0b4a1a32427df9f8125047e19ab9d999e5784b0f16bdd\",\"license\":\"UNLICENSED\"},\"contracts/dex/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x9d560749edd49985570771e97ea03d1e462d945b27d9767e45c46b97cee1252a\",\"license\":\"UNLICENSED\"},\"contracts/dex/interfaces/IUniswapV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xf71c7d2217c5630520397f67b1f818c7b30ba5dc0b84f51a478861c5c614dc27\",\"license\":\"UNLICENSED\"},\"contracts/dex/interfaces/IUniswapV2Pair.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x59ceaeef70b5349798c6510c8d4933ba90baddd0575e8cbc5bb1683778158ba3\",\"license\":\"UNLICENSED\"},\"contracts/dex/libraries/Math.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf898dbb6416063b7c7f81cf55975782291a4eefaa1b4f541f7729b0a3a1035ac\",\"license\":\"UNLICENSED\"},\"contracts/dex/libraries/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    // function div(uint256 a, uint256 b) internal pure returns(uint256) {\\n    //          require(a >0 , 'ds-math-div-overflow');\\n\\n    //     }\\n    \\n}\\n\",\"keccak256\":\"0x0f6dbd5f5fbe8bcf2d9491f69220e6ffeffb005f3e8550692a4526c8fa51abf1\",\"license\":\"UNLICENSED\"},\"contracts/dex/libraries/UQ112x112.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x6e4ea4a2d977ad73f439df0056ccffa3f6c66627774d21d138338826a160ad27\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161287a38038061287a83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6127e7806100936000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063017e7e581461007d578063094b7415146100ad5780631e3dd18b146100c0578063574f2ba3146100d3578063a2e74af6146100e4578063c9c65396146100f9578063e6a439051461010c578063f46901ed14610140575b600080fd5b600054610090906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610090906001600160a01b031681565b6100906100ce36600461051f565b610153565b6003546040519081526020016100a4565b6100f76100f2366004610554565b61017d565b005b610090610107366004610576565b6101d2565b61009061011a366004610576565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6100f761014e366004610554565b6104c6565b6003818154811061016357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101b05760405162461bcd60e51b81526004016101a7906105a9565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102365760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f414444524553534553000060448201526064016101a7565b600080836001600160a01b0316856001600160a01b03161061025957838561025c565b84845b90925090506001600160a01b0382166102b15760405162461bcd60e51b8152602060048201526017602482015276556e697377617056323a205a45524f5f4144445245535360481b60448201526064016101a7565b6001600160a01b0382811660009081526002602090815260408083208585168452909152902054161561031f5760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b60448201526064016101a7565b60006040518060200161033190610512565b601f1982820381018352601f9091011660408190526001600160601b0319606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146104f05760405162461bcd60e51b81526004016101a7906105a9565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612203806105d883390190565b60006020828403121561053157600080fd5b5035919050565b80356001600160a01b038116811461054f57600080fd5b919050565b60006020828403121561056657600080fd5b61056f82610538565b9392505050565b6000806040838503121561058957600080fd5b61059283610538565b91506105a060208401610538565b90509250929050565b6020808252601490820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60408201526060019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556120fb806101086000396000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c8063022c0d9f1461014e57806306fdde03146101635780630902f1ac146101a2578063095ea7b3146101d65780630dfe1681146101f957806318160ddd1461021957806323b872dd1461023057806330adf81f14610243578063313ce567146102585780633644e51514610272578063485cc9551461027b5780635909c0d51461028e5780635a3d5493146102975780636a627842146102a057806370a08231146102b35780637464fc3d146102d35780637ecebe00146102dc57806389afcb44146102fc57806395d89b4114610324578063a9059cbb14610349578063ba9a7a561461035c578063bc25cf7714610365578063c45a015514610378578063d21220a71461038b578063d505accf1461039e578063dd62ed3e146103b1578063fff6cae9146103dc575b600080fd5b61016161015c366004611c46565b6103e4565b005b61018c6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101999190611d0b565b60405180910390f35b6101aa6108e2565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610199565b6101e96101e4366004611d3e565b61090c565b6040519015158152602001610199565b60065461020c906001600160a01b031681565b6040516101999190611d6a565b61022260005481565b604051908152602001610199565b6101e961023e366004611d7e565b610923565b6102226000805160206120cf83398151915281565b610260601281565b60405160ff9091168152602001610199565b61022260035481565b610161610289366004611dbf565b6109bc565b61022260095481565b610222600a5481565b6102226102ae366004611df8565b610a3b565b6102226102c1366004611df8565b60016020526000908152604090205481565b610222600b5481565b6102226102ea366004611df8565b60046020526000908152604090205481565b61030f61030a366004611df8565b610cf8565b60408051928352602083019190915201610199565b61018c604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6101e9610357366004611d3e565b61105e565b6102226103e881565b610161610373366004611df8565b61106b565b60055461020c906001600160a01b031681565b60075461020c906001600160a01b031681565b6101616103ac366004611e15565b611189565b6102226103bf366004611dbf565b600260209081526000928352604080842090915290825290205481565b61016161138a565b600c5460011461040f5760405162461bcd60e51b815260040161040690611e8c565b60405180910390fd5b6000600c55841515806104225750600084115b61047c5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610406565b6000806104876108e2565b5091509150816001600160701b0316871080156104ac5750806001600160701b031686105b6104f05760405162461bcd60e51b815260206004820152602160248201526000805160206120af8339815191526044820152605960f81b6064820152608401610406565b60065460075460009182916001600160a01b0391821691908116908916821480159061052e5750806001600160a01b0316896001600160a01b031614155b6105725760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610406565b8a1561058357610583828a8d6114b8565b891561059457610594818a8c6114b8565b8615610601576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906105ce9033908f908f908e908e90600401611eb7565b600060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526001600160a01b038316906370a082319061062d903090600401611d6a565b602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e9190611f03565b6040516370a0823160e01b81529094506001600160a01b038216906370a082319061069d903090600401611d6a565b602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611f03565b92505050600089856001600160701b03166106f99190611f32565b8311610706576000610723565b6107198a6001600160701b038716611f32565b6107239084611f32565b9050600061073a8a6001600160701b038716611f32565b8311610747576000610764565b61075a8a6001600160701b038716611f32565b6107649084611f32565b905060008211806107755750600081115b6107cd5760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610406565b60006107ef6107dd8460036115fc565b6107e9876103e86115fc565b90611663565b905060006108016107dd8460036115fc565b9050610826620f42406108206001600160701b038b8116908b166115fc565b906115fc565b61083083836115fc565b101561086d5760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610406565b505061087b848488886116b9565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006109193384846118a4565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546001600160801b03146109a7576001600160a01b03841660009081526002602090815260408083203384529091529020546109829083611663565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6109b28484846118d0565b5060019392505050565b6005546001600160a01b03163314610a0d5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610406565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610a5f5760405162461bcd60e51b815260040161040690611e8c565b6000600c81905580610a6f6108e2565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610aa9903090600401611d6a565b602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190611f03565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610b20903090600401611d6a565b602060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190611f03565b90506000610b78836001600160701b038716611663565b90506000610b8f836001600160701b038716611663565b90506000610b9d8787611943565b60005490915080610bd457610bc06103e86107e9610bbb87876115fc565b611a80565b9850610bcf60006103e8611af0565b610c1b565b610c186001600160701b038916610beb86846115fc565b610bf59190611f5f565b6001600160701b038916610c0986856115fc565b610c139190611f5f565b611b42565b98505b60008911610c6a5760405162461bcd60e51b815260206004820152602860248201526000805160206120af8339815191526044820152671657d3525395115160c21b6064820152608401610406565b610c748a8a611af0565b610c8086868a8a6116b9565b8115610caa57600854610ca6906001600160701b0380821691600160701b9004166115fc565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610d1d5760405162461bcd60e51b815260040161040690611e8c565b6000600c81905580610d2d6108e2565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d6f903090600401611d6a565b602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190611f03565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610de09190611d6a565b602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190611f03565b30600090815260016020526040812054919250610e3e8888611943565b60005490915080610e4f84876115fc565b610e599190611f5f565b9a5080610e6684866115fc565b610e709190611f5f565b995060008b118015610e82575060008a115b610ecd5760405162461bcd60e51b815260206004820152602860248201526000805160206120af8339815191526044820152671657d0955493915160c21b6064820152608401610406565b610ed73084611b5a565b610ee2878d8d6114b8565b610eed868d8c6114b8565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610f19903090600401611d6a565b602060405180830381865afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a9190611f03565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f89903090600401611d6a565b602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611f03565b9350610fd885858b8b6116b9565b811561100257600854610ffe906001600160701b0380821691600160701b9004166115fc565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b60006109193384846118d0565b600c5460011461108d5760405162461bcd60e51b815260040161040690611e8c565b6000600c556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161112c9184918691611127916001600160701b039091169084906370a08231906110e6903090600401611d6a565b602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190611f03565b6114b8565b61117f81846111276008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110e69190611d6a565b50506001600c5550565b428410156111ce5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610406565b6003546001600160a01b038816600090815260046020526040812080549192916000805160206120cf833981519152918b918b918b91908761120f83611f73565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161128892919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156112f3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906113295750886001600160a01b0316816001600160a01b0316145b6113745760405162461bcd60e51b815260206004820152601c60248201527b556e697377617056323a20494e56414c49445f5349474e415455524560201b6044820152606401610406565b61137f8989896118a4565b505050505050505050565b600c546001146113ac5760405162461bcd60e51b815260040161040690611e8c565b6000600c556006546040516370a0823160e01b81526114b1916001600160a01b0316906370a08231906113e3903090600401611d6a565b602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611f03565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611454903090600401611d6a565b602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190611f03565b6008546001600160701b0380821691600160701b9004166116b9565b6001600c55565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916115409190611f8e565b6000604051808303816000865af19150503d806000811461157d576040519150601f19603f3d011682016040523d82523d6000602084013e611582565b606091505b50915091508180156115ac5750805115806115ac5750808060200190518101906115ac9190611faa565b6115f55760405162461bcd60e51b815260206004820152601a602482015279155b9a5cddd85c158c8e881514905394d1915497d1905253115160321b6044820152606401610406565b5050505050565b6000811580611620575082826116128183611fcc565b925061161e9083611f5f565b145b61091d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610406565b6000826116708382611f32565b915081111561091d5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610406565b6001600160701b0384118015906116d757506001600160701b038311155b6117195760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610406565b6000611729600160201b42611feb565b60085490915060009061174990600160e01b900463ffffffff1683611fff565b905060008163ffffffff1611801561176957506001600160701b03841615155b801561177d57506001600160701b03831615155b1561180c578063ffffffff166117a58561179686611bab565b6001600160e01b031690611bc4565b6001600160e01b03166117b89190611fcc565b600960008282546117c99190612024565b909155505063ffffffff81166117e28461179687611bab565b6001600160e01b03166117f59190611fcc565b600a60008282546118069190612024565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0392831660009081526002602090815260408083209490951682529290925291902055565b6001600160a01b0383166000908152600160205260409020546118f39082611663565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546119229082611bd9565b6001600160a01b039092166000908152600160205260409020919091555050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd919061203c565b600b546001600160a01b038216158015945091925090611a6c578015611a675760006119f8610bbb6001600160701b038881169088166115fc565b90506000611a0583611a80565b905080821115611a64576000611a27611a1e8484611663565b600054906115fc565b90506000611a4083611a3a8660056115fc565b90611bd9565b90506000611a4e8284611f5f565b90508015611a6057611a608782611af0565b5050505b50505b611a78565b8015611a78576000600b555b505092915050565b60006003821115611ae15750806000611a9a600283611f5f565b611aa5906001612024565b90505b81811015611adb57905080600281611ac08186611f5f565b611aca9190612024565b611ad49190611f5f565b9050611aa8565b50919050565b8115611aeb575060015b919050565b600054611afd9082611bd9565b60009081556001600160a01b038316815260016020526040902054611b229082611bd9565b6001600160a01b0390921660009081526001602052604090209190915550565b6000818310611b515781611b53565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611b7d9082611663565b6001600160a01b03831660009081526001602052604081209190915554611ba49082611663565b6000555050565b600061091d600160701b6001600160701b038416612059565b6000611b536001600160701b03831684612088565b600082611be68382612024565b915081101561091d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610406565b6001600160a01b0381168114611c4357600080fd5b50565b600080600080600060808688031215611c5e57600080fd5b85359450602086013593506040860135611c7781611c2e565b925060608601356001600160401b0380821115611c9357600080fd5b818801915088601f830112611ca757600080fd5b813581811115611cb657600080fd5b896020828501011115611cc857600080fd5b9699959850939650602001949392505050565b60005b83811015611cf6578181015183820152602001611cde565b83811115611d05576000848401525b50505050565b6020815260008251806020840152611d2a816040850160208701611cdb565b601f01601f19169190910160400192915050565b60008060408385031215611d5157600080fd5b8235611d5c81611c2e565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600080600060608486031215611d9357600080fd5b8335611d9e81611c2e565b92506020840135611dae81611c2e565b929592945050506040919091013590565b60008060408385031215611dd257600080fd5b8235611ddd81611c2e565b91506020830135611ded81611c2e565b809150509250929050565b600060208284031215611e0a57600080fd5b8135611b5381611c2e565b600080600080600080600060e0888a031215611e3057600080fd5b8735611e3b81611c2e565b96506020880135611e4b81611c2e565b95506040880135945060608801359350608088013560ff81168114611e6f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600060208284031215611f1557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611f4457611f44611f1c565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611f6e57611f6e611f49565b500490565b6000600019821415611f8757611f87611f1c565b5060010190565b60008251611fa0818460208701611cdb565b9190910192915050565b600060208284031215611fbc57600080fd5b81518015158114611b5357600080fd5b6000816000190483118215151615611fe657611fe6611f1c565b500290565b600082611ffa57611ffa611f49565b500690565b600063ffffffff8381169083168181101561201c5761201c611f1c565b039392505050565b6000821982111561203757612037611f1c565b500190565b60006020828403121561204e57600080fd5b8151611b5381611c2e565b60006001600160e01b038281168482168115158284048211161561207f5761207f611f1c565b02949350505050565b60006001600160e01b03838116806120a2576120a2611f49565b9216919091049291505056fe556e697377617056323a20494e53554646494349454e545f4c495155494449546e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9a164736f6c634300080b000aa164736f6c634300080b000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c8063017e7e581461007d578063094b7415146100ad5780631e3dd18b146100c0578063574f2ba3146100d3578063a2e74af6146100e4578063c9c65396146100f9578063e6a439051461010c578063f46901ed14610140575b600080fd5b600054610090906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610090906001600160a01b031681565b6100906100ce36600461051f565b610153565b6003546040519081526020016100a4565b6100f76100f2366004610554565b61017d565b005b610090610107366004610576565b6101d2565b61009061011a366004610576565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6100f761014e366004610554565b6104c6565b6003818154811061016357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101b05760405162461bcd60e51b81526004016101a7906105a9565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156102365760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f414444524553534553000060448201526064016101a7565b600080836001600160a01b0316856001600160a01b03161061025957838561025c565b84845b90925090506001600160a01b0382166102b15760405162461bcd60e51b8152602060048201526017602482015276556e697377617056323a205a45524f5f4144445245535360481b60448201526064016101a7565b6001600160a01b0382811660009081526002602090815260408083208585168452909152902054161561031f5760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b60448201526064016101a7565b60006040518060200161033190610512565b601f1982820381018352601f9091011660408190526001600160601b0319606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146104f05760405162461bcd60e51b81526004016101a7906105a9565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612203806105d883390190565b60006020828403121561053157600080fd5b5035919050565b80356001600160a01b038116811461054f57600080fd5b919050565b60006020828403121561056657600080fd5b61056f82610538565b9392505050565b6000806040838503121561058957600080fd5b61059283610538565b91506105a060208401610538565b90509250929050565b6020808252601490820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60408201526060019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556120fb806101086000396000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c8063022c0d9f1461014e57806306fdde03146101635780630902f1ac146101a2578063095ea7b3146101d65780630dfe1681146101f957806318160ddd1461021957806323b872dd1461023057806330adf81f14610243578063313ce567146102585780633644e51514610272578063485cc9551461027b5780635909c0d51461028e5780635a3d5493146102975780636a627842146102a057806370a08231146102b35780637464fc3d146102d35780637ecebe00146102dc57806389afcb44146102fc57806395d89b4114610324578063a9059cbb14610349578063ba9a7a561461035c578063bc25cf7714610365578063c45a015514610378578063d21220a71461038b578063d505accf1461039e578063dd62ed3e146103b1578063fff6cae9146103dc575b600080fd5b61016161015c366004611c46565b6103e4565b005b61018c6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101999190611d0b565b60405180910390f35b6101aa6108e2565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610199565b6101e96101e4366004611d3e565b61090c565b6040519015158152602001610199565b60065461020c906001600160a01b031681565b6040516101999190611d6a565b61022260005481565b604051908152602001610199565b6101e961023e366004611d7e565b610923565b6102226000805160206120cf83398151915281565b610260601281565b60405160ff9091168152602001610199565b61022260035481565b610161610289366004611dbf565b6109bc565b61022260095481565b610222600a5481565b6102226102ae366004611df8565b610a3b565b6102226102c1366004611df8565b60016020526000908152604090205481565b610222600b5481565b6102226102ea366004611df8565b60046020526000908152604090205481565b61030f61030a366004611df8565b610cf8565b60408051928352602083019190915201610199565b61018c604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6101e9610357366004611d3e565b61105e565b6102226103e881565b610161610373366004611df8565b61106b565b60055461020c906001600160a01b031681565b60075461020c906001600160a01b031681565b6101616103ac366004611e15565b611189565b6102226103bf366004611dbf565b600260209081526000928352604080842090915290825290205481565b61016161138a565b600c5460011461040f5760405162461bcd60e51b815260040161040690611e8c565b60405180910390fd5b6000600c55841515806104225750600084115b61047c5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610406565b6000806104876108e2565b5091509150816001600160701b0316871080156104ac5750806001600160701b031686105b6104f05760405162461bcd60e51b815260206004820152602160248201526000805160206120af8339815191526044820152605960f81b6064820152608401610406565b60065460075460009182916001600160a01b0391821691908116908916821480159061052e5750806001600160a01b0316896001600160a01b031614155b6105725760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610406565b8a1561058357610583828a8d6114b8565b891561059457610594818a8c6114b8565b8615610601576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906105ce9033908f908f908e908e90600401611eb7565b600060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526001600160a01b038316906370a082319061062d903090600401611d6a565b602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e9190611f03565b6040516370a0823160e01b81529094506001600160a01b038216906370a082319061069d903090600401611d6a565b602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611f03565b92505050600089856001600160701b03166106f99190611f32565b8311610706576000610723565b6107198a6001600160701b038716611f32565b6107239084611f32565b9050600061073a8a6001600160701b038716611f32565b8311610747576000610764565b61075a8a6001600160701b038716611f32565b6107649084611f32565b905060008211806107755750600081115b6107cd5760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610406565b60006107ef6107dd8460036115fc565b6107e9876103e86115fc565b90611663565b905060006108016107dd8460036115fc565b9050610826620f42406108206001600160701b038b8116908b166115fc565b906115fc565b61083083836115fc565b101561086d5760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610406565b505061087b848488886116b9565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006109193384846118a4565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546001600160801b03146109a7576001600160a01b03841660009081526002602090815260408083203384529091529020546109829083611663565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6109b28484846118d0565b5060019392505050565b6005546001600160a01b03163314610a0d5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610406565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610a5f5760405162461bcd60e51b815260040161040690611e8c565b6000600c81905580610a6f6108e2565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610aa9903090600401611d6a565b602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190611f03565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610b20903090600401611d6a565b602060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190611f03565b90506000610b78836001600160701b038716611663565b90506000610b8f836001600160701b038716611663565b90506000610b9d8787611943565b60005490915080610bd457610bc06103e86107e9610bbb87876115fc565b611a80565b9850610bcf60006103e8611af0565b610c1b565b610c186001600160701b038916610beb86846115fc565b610bf59190611f5f565b6001600160701b038916610c0986856115fc565b610c139190611f5f565b611b42565b98505b60008911610c6a5760405162461bcd60e51b815260206004820152602860248201526000805160206120af8339815191526044820152671657d3525395115160c21b6064820152608401610406565b610c748a8a611af0565b610c8086868a8a6116b9565b8115610caa57600854610ca6906001600160701b0380821691600160701b9004166115fc565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610d1d5760405162461bcd60e51b815260040161040690611e8c565b6000600c81905580610d2d6108e2565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d6f903090600401611d6a565b602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190611f03565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610de09190611d6a565b602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190611f03565b30600090815260016020526040812054919250610e3e8888611943565b60005490915080610e4f84876115fc565b610e599190611f5f565b9a5080610e6684866115fc565b610e709190611f5f565b995060008b118015610e82575060008a115b610ecd5760405162461bcd60e51b815260206004820152602860248201526000805160206120af8339815191526044820152671657d0955493915160c21b6064820152608401610406565b610ed73084611b5a565b610ee2878d8d6114b8565b610eed868d8c6114b8565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610f19903090600401611d6a565b602060405180830381865afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a9190611f03565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f89903090600401611d6a565b602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611f03565b9350610fd885858b8b6116b9565b811561100257600854610ffe906001600160701b0380821691600160701b9004166115fc565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b60006109193384846118d0565b600c5460011461108d5760405162461bcd60e51b815260040161040690611e8c565b6000600c556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161112c9184918691611127916001600160701b039091169084906370a08231906110e6903090600401611d6a565b602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e99190611f03565b6114b8565b61117f81846111276008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110e69190611d6a565b50506001600c5550565b428410156111ce5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610406565b6003546001600160a01b038816600090815260046020526040812080549192916000805160206120cf833981519152918b918b918b91908761120f83611f73565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161128892919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156112f3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906113295750886001600160a01b0316816001600160a01b0316145b6113745760405162461bcd60e51b815260206004820152601c60248201527b556e697377617056323a20494e56414c49445f5349474e415455524560201b6044820152606401610406565b61137f8989896118a4565b505050505050505050565b600c546001146113ac5760405162461bcd60e51b815260040161040690611e8c565b6000600c556006546040516370a0823160e01b81526114b1916001600160a01b0316906370a08231906113e3903090600401611d6a565b602060405180830381865afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611f03565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611454903090600401611d6a565b602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190611f03565b6008546001600160701b0380821691600160701b9004166116b9565b6001600c55565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916115409190611f8e565b6000604051808303816000865af19150503d806000811461157d576040519150601f19603f3d011682016040523d82523d6000602084013e611582565b606091505b50915091508180156115ac5750805115806115ac5750808060200190518101906115ac9190611faa565b6115f55760405162461bcd60e51b815260206004820152601a602482015279155b9a5cddd85c158c8e881514905394d1915497d1905253115160321b6044820152606401610406565b5050505050565b6000811580611620575082826116128183611fcc565b925061161e9083611f5f565b145b61091d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610406565b6000826116708382611f32565b915081111561091d5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610406565b6001600160701b0384118015906116d757506001600160701b038311155b6117195760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610406565b6000611729600160201b42611feb565b60085490915060009061174990600160e01b900463ffffffff1683611fff565b905060008163ffffffff1611801561176957506001600160701b03841615155b801561177d57506001600160701b03831615155b1561180c578063ffffffff166117a58561179686611bab565b6001600160e01b031690611bc4565b6001600160e01b03166117b89190611fcc565b600960008282546117c99190612024565b909155505063ffffffff81166117e28461179687611bab565b6001600160e01b03166117f59190611fcc565b600a60008282546118069190612024565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0392831660009081526002602090815260408083209490951682529290925291902055565b6001600160a01b0383166000908152600160205260409020546118f39082611663565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546119229082611bd9565b6001600160a01b039092166000908152600160205260409020919091555050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd919061203c565b600b546001600160a01b038216158015945091925090611a6c578015611a675760006119f8610bbb6001600160701b038881169088166115fc565b90506000611a0583611a80565b905080821115611a64576000611a27611a1e8484611663565b600054906115fc565b90506000611a4083611a3a8660056115fc565b90611bd9565b90506000611a4e8284611f5f565b90508015611a6057611a608782611af0565b5050505b50505b611a78565b8015611a78576000600b555b505092915050565b60006003821115611ae15750806000611a9a600283611f5f565b611aa5906001612024565b90505b81811015611adb57905080600281611ac08186611f5f565b611aca9190612024565b611ad49190611f5f565b9050611aa8565b50919050565b8115611aeb575060015b919050565b600054611afd9082611bd9565b60009081556001600160a01b038316815260016020526040902054611b229082611bd9565b6001600160a01b0390921660009081526001602052604090209190915550565b6000818310611b515781611b53565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611b7d9082611663565b6001600160a01b03831660009081526001602052604081209190915554611ba49082611663565b6000555050565b600061091d600160701b6001600160701b038416612059565b6000611b536001600160701b03831684612088565b600082611be68382612024565b915081101561091d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610406565b6001600160a01b0381168114611c4357600080fd5b50565b600080600080600060808688031215611c5e57600080fd5b85359450602086013593506040860135611c7781611c2e565b925060608601356001600160401b0380821115611c9357600080fd5b818801915088601f830112611ca757600080fd5b813581811115611cb657600080fd5b896020828501011115611cc857600080fd5b9699959850939650602001949392505050565b60005b83811015611cf6578181015183820152602001611cde565b83811115611d05576000848401525b50505050565b6020815260008251806020840152611d2a816040850160208701611cdb565b601f01601f19169190910160400192915050565b60008060408385031215611d5157600080fd5b8235611d5c81611c2e565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600080600060608486031215611d9357600080fd5b8335611d9e81611c2e565b92506020840135611dae81611c2e565b929592945050506040919091013590565b60008060408385031215611dd257600080fd5b8235611ddd81611c2e565b91506020830135611ded81611c2e565b809150509250929050565b600060208284031215611e0a57600080fd5b8135611b5381611c2e565b600080600080600080600060e0888a031215611e3057600080fd5b8735611e3b81611c2e565b96506020880135611e4b81611c2e565b95506040880135945060608801359350608088013560ff81168114611e6f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600060208284031215611f1557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611f4457611f44611f1c565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611f6e57611f6e611f49565b500490565b6000600019821415611f8757611f87611f1c565b5060010190565b60008251611fa0818460208701611cdb565b9190910192915050565b600060208284031215611fbc57600080fd5b81518015158114611b5357600080fd5b6000816000190483118215151615611fe657611fe6611f1c565b500290565b600082611ffa57611ffa611f49565b500690565b600063ffffffff8381169083168181101561201c5761201c611f1c565b039392505050565b6000821982111561203757612037611f1c565b500190565b60006020828403121561204e57600080fd5b8151611b5381611c2e565b60006001600160e01b038281168482168115158284048211161561207f5761207f611f1c565b02949350505050565b60006001600160e01b03838116806120a2576120a2611f49565b9216919091049291505056fe556e697377617056323a20494e53554646494349454e545f4c495155494449546e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9a164736f6c634300080b000aa164736f6c634300080b000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 365,
        "contract": "contracts/dex/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 367,
        "contract": "contracts/dex/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 373,
        "contract": "contracts/dex/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 376,
        "contract": "contracts/dex/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}